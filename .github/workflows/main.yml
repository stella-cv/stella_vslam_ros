name: CI

on:
  push:
    branches: [ ros2 ]
  pull_request:
    branches: [ ros2 ]

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: DoozyX/clang-format-lint-action@v0.12
        with:
          source: '.'
          exclude: './3rd'
          extensions: 'h,cc'
          clangFormatVersion: 6
          style: file
          inplace: False

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: ghcr.io/ymd-stella/openvslam-community/openvslam-ros2:galactic
      env:
        ROS_LOG_DIR: ${GITHUB_WORKSPACE}/.ros
    steps:
      - uses: actions/checkout@v2
      - name: build ros2 packages
        run: |
          mkdir -p /ros_ws/src
          cp -r . /ros_ws/src/openvslam_ros
          cd /ros_ws/src
          git clone --depth 1 https://github.com/OpenVSLAM-Community/openvslam.git
          cd openvslam
          git submodule update -i --recursive
          cd ../..
          export MAKEFLAGS="-j $(($(nproc) / 2))"
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && colcon build --parallel-workers 1)
      - name: run run_slam (mono)
        run: |
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 odom base_footprint)&
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 -1.57 0 0 -1.57 base_footprint cam0)&
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && source /ros_ws/install/setup.bash && ros2 run openvslam_ros run_slam -v /datasets/orb_vocab/orb_vocab.fbow -c /ros_ws/src/openvslam/example/euroc/EuRoC_mono.yaml --map-db map_mono.msg --ros-args -r /camera/image_raw:=/cam0/image_raw)&
          (source /opt/ros/${ROS1_DISTRO}/setup.bash && source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 bag play -s rosbag_v2 /datasets/EuRoC/MH_04_difficult.bag)
          sleep 1
          if ! pkill -0 run_slam; then exit 1; fi
          echo "pkill -SIGINT -f run_slam"
          pkill -SIGINT -f run_slam
          while pkill -0 run_slam 2> /dev/null; do sleep 1; done
          pkill -SIGINT -f static_transform_publisher
      - name: run run_slam (stereo)
        run: |
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 odom base_footprint)&
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 -1.57 0 0 -1.57 base_footprint cam0)&
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && source /ros_ws/install/setup.bash && ros2 run openvslam_ros run_slam -r -v /datasets/orb_vocab/orb_vocab.fbow -c /ros_ws/src/openvslam/example/euroc/EuRoC_stereo.yaml --map-db map_stereo.msg --ros-args -r /camera/left/image_raw:=/cam0/image_raw -r /camera/right/image_raw:=/cam1/image_raw)&
          (source /opt/ros/${ROS1_DISTRO}/setup.bash && source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 bag play -s rosbag_v2 /datasets/EuRoC/MH_04_difficult.bag)
          sleep 1
          if ! pkill -0 run_slam; then exit 1; fi
          echo "pkill -SIGINT -f run_slam"
          pkill -SIGINT -f run_slam
          while pkill -0 run_slam 2> /dev/null; do sleep 1; done
          pkill -SIGINT -f static_transform_publisher
      - name: run run_localization
        run: |
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 odom base_footprint)&
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 run tf2_ros static_transform_publisher 0 0 0 -1.57 0 -1.57 base_footprint cam0)&
          (source /opt/ros/${ROS2_DISTRO}/setup.bash && source /ros_ws/install/setup.bash && ros2 run openvslam_ros run_localization -v /datasets/orb_vocab/orb_vocab.fbow -c /ros_ws/src/openvslam/example/euroc/EuRoC_mono.yaml --map-db map_mono.msg --ros-args -r /camera/image_raw:=/cam0/image_raw)&
          sleep 5
          (source /opt/ros/${ROS1_DISTRO}/setup.bash && source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 bag play -s rosbag_v2 /datasets/EuRoC/MH_04_difficult.bag)
          pkill -SIGINT -f run_localization
          pkill -SIGINT -f static_transform_publisher

  rosdep:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: ghcr.io/ymd-stella/openvslam-community/ros:galactic-ros-base
      env:
        ROS_LOG_DIR: ${GITHUB_WORKSPACE}/.ros
    steps:
      - name: build ros2 packages
        run: |
          mkdir -p /ros_ws/src
          cp -r . /ros_ws/src/openvslam_ros
          cd /ros_ws/src
          git clone --depth 1 https://github.com/OpenVSLAM-Community/openvslam.git
          cd openvslam
          git submodule update -i --recursive
          cd ../..
          rosdep update
          apt update
          rosdep install -y -i --from-paths src
          export MAKEFLAGS="-j $(($(nproc) / 2))"
          (source /opt/ros/${ROS_DISTRO}/setup.bash && colcon build --parallel-workers 1)
